=begin
#Elastic Email REST API

#This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    The API has a limit of 20 concurrent connections and a hard timeout of 600 seconds per request.    To start using this API, you will need your Access Token (available <a target=\"_blank\" href=\"https://app.elasticemail.com/marketing/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given requestâ€™s description.    Downloadable library clients can be found in our Github repository <a target=\"_blank\" href=\"https://github.com/ElasticEmail?tab=repositories&q=%22rest+api%22+in%3Areadme\">here</a>

The version of the OpenAPI document: 4.0.0
Contact: support@elasticemail.com
Generated by: https://openapi-generator.tech
Generator version: 7.5.0

=end

require 'cgi'

module ElasticEmail
  class DomainsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Delete Domain
    # Deletes configured domain from Account. Required Access Level: ModifySettings
    # @param domain [String] Name of the given domain
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def domains_by_domain_delete(domain, opts = {})
      domains_by_domain_delete_with_http_info(domain, opts)
      nil
    end

    # Delete Domain
    # Deletes configured domain from Account. Required Access Level: ModifySettings
    # @param domain [String] Name of the given domain
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def domains_by_domain_delete_with_http_info(domain, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DomainsApi.domains_by_domain_delete ...'
      end
      # verify the required parameter 'domain' is set
      if @api_client.config.client_side_validation && domain.nil?
        fail ArgumentError, "Missing the required parameter 'domain' when calling DomainsApi.domains_by_domain_delete"
      end
      # resource path
      local_var_path = '/domains/{domain}'.sub('{' + 'domain' + '}', CGI.escape(domain.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apikey']

      new_options = opts.merge(
        :operation => :"DomainsApi.domains_by_domain_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DomainsApi#domains_by_domain_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Load Domain
    # Retrieve a domain configured for this Account. Required Access Level: ViewSettings
    # @param domain [String] Name of the given domain
    # @param [Hash] opts the optional parameters
    # @return [DomainData]
    def domains_by_domain_get(domain, opts = {})
      data, _status_code, _headers = domains_by_domain_get_with_http_info(domain, opts)
      data
    end

    # Load Domain
    # Retrieve a domain configured for this Account. Required Access Level: ViewSettings
    # @param domain [String] Name of the given domain
    # @param [Hash] opts the optional parameters
    # @return [Array<(DomainData, Integer, Hash)>] DomainData data, response status code and response headers
    def domains_by_domain_get_with_http_info(domain, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DomainsApi.domains_by_domain_get ...'
      end
      # verify the required parameter 'domain' is set
      if @api_client.config.client_side_validation && domain.nil?
        fail ArgumentError, "Missing the required parameter 'domain' when calling DomainsApi.domains_by_domain_get"
      end
      # resource path
      local_var_path = '/domains/{domain}'.sub('{' + 'domain' + '}', CGI.escape(domain.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DomainData'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apikey']

      new_options = opts.merge(
        :operation => :"DomainsApi.domains_by_domain_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DomainsApi#domains_by_domain_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Domain
    # Updates the specified domain. Required Access Level: ModifySettings
    # @param domain [String] Name of the given domain
    # @param domain_update_payload [DomainUpdatePayload] Updated Domain resource
    # @param [Hash] opts the optional parameters
    # @return [DomainDetail]
    def domains_by_domain_put(domain, domain_update_payload, opts = {})
      data, _status_code, _headers = domains_by_domain_put_with_http_info(domain, domain_update_payload, opts)
      data
    end

    # Update Domain
    # Updates the specified domain. Required Access Level: ModifySettings
    # @param domain [String] Name of the given domain
    # @param domain_update_payload [DomainUpdatePayload] Updated Domain resource
    # @param [Hash] opts the optional parameters
    # @return [Array<(DomainDetail, Integer, Hash)>] DomainDetail data, response status code and response headers
    def domains_by_domain_put_with_http_info(domain, domain_update_payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DomainsApi.domains_by_domain_put ...'
      end
      # verify the required parameter 'domain' is set
      if @api_client.config.client_side_validation && domain.nil?
        fail ArgumentError, "Missing the required parameter 'domain' when calling DomainsApi.domains_by_domain_put"
      end
      # verify the required parameter 'domain_update_payload' is set
      if @api_client.config.client_side_validation && domain_update_payload.nil?
        fail ArgumentError, "Missing the required parameter 'domain_update_payload' when calling DomainsApi.domains_by_domain_put"
      end
      # resource path
      local_var_path = '/domains/{domain}'.sub('{' + 'domain' + '}', CGI.escape(domain.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(domain_update_payload)

      # return_type
      return_type = opts[:debug_return_type] || 'DomainDetail'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apikey']

      new_options = opts.merge(
        :operation => :"DomainsApi.domains_by_domain_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DomainsApi#domains_by_domain_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Check for domain restriction
    # Checking if domain is from free provider, or restricted. Required Access Level: ViewSettings
    # @param domain [String] Name of the given domain
    # @param [Hash] opts the optional parameters
    # @return [Boolean]
    def domains_by_domain_restricted_get(domain, opts = {})
      data, _status_code, _headers = domains_by_domain_restricted_get_with_http_info(domain, opts)
      data
    end

    # Check for domain restriction
    # Checking if domain is from free provider, or restricted. Required Access Level: ViewSettings
    # @param domain [String] Name of the given domain
    # @param [Hash] opts the optional parameters
    # @return [Array<(Boolean, Integer, Hash)>] Boolean data, response status code and response headers
    def domains_by_domain_restricted_get_with_http_info(domain, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DomainsApi.domains_by_domain_restricted_get ...'
      end
      # verify the required parameter 'domain' is set
      if @api_client.config.client_side_validation && domain.nil?
        fail ArgumentError, "Missing the required parameter 'domain' when calling DomainsApi.domains_by_domain_restricted_get"
      end
      # resource path
      local_var_path = '/domains/{domain}/restricted'.sub('{' + 'domain' + '}', CGI.escape(domain.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Boolean'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apikey']

      new_options = opts.merge(
        :operation => :"DomainsApi.domains_by_domain_restricted_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DomainsApi#domains_by_domain_restricted_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Verify Domain
    # Verifies that required DNS records exist for specified domain. Required Access Level: ModifySettings
    # @param domain [String] Name of the given domain
    # @param body [String] Tracking type used in the Tracking verification
    # @param [Hash] opts the optional parameters
    # @return [DomainData]
    def domains_by_domain_verification_put(domain, body, opts = {})
      data, _status_code, _headers = domains_by_domain_verification_put_with_http_info(domain, body, opts)
      data
    end

    # Verify Domain
    # Verifies that required DNS records exist for specified domain. Required Access Level: ModifySettings
    # @param domain [String] Name of the given domain
    # @param body [String] Tracking type used in the Tracking verification
    # @param [Hash] opts the optional parameters
    # @return [Array<(DomainData, Integer, Hash)>] DomainData data, response status code and response headers
    def domains_by_domain_verification_put_with_http_info(domain, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DomainsApi.domains_by_domain_verification_put ...'
      end
      # verify the required parameter 'domain' is set
      if @api_client.config.client_side_validation && domain.nil?
        fail ArgumentError, "Missing the required parameter 'domain' when calling DomainsApi.domains_by_domain_verification_put"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling DomainsApi.domains_by_domain_verification_put"
      end
      # resource path
      local_var_path = '/domains/{domain}/verification'.sub('{' + 'domain' + '}', CGI.escape(domain.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'DomainData'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apikey']

      new_options = opts.merge(
        :operation => :"DomainsApi.domains_by_domain_verification_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DomainsApi#domains_by_domain_verification_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set Default
    # Sets a verified email address as default sender. Required Access Level: ModifySettings
    # @param email [String] Default email sender, example: mail@yourdomain.com
    # @param [Hash] opts the optional parameters
    # @return [DomainDetail]
    def domains_by_email_default_patch(email, opts = {})
      data, _status_code, _headers = domains_by_email_default_patch_with_http_info(email, opts)
      data
    end

    # Set Default
    # Sets a verified email address as default sender. Required Access Level: ModifySettings
    # @param email [String] Default email sender, example: mail@yourdomain.com
    # @param [Hash] opts the optional parameters
    # @return [Array<(DomainDetail, Integer, Hash)>] DomainDetail data, response status code and response headers
    def domains_by_email_default_patch_with_http_info(email, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DomainsApi.domains_by_email_default_patch ...'
      end
      # verify the required parameter 'email' is set
      if @api_client.config.client_side_validation && email.nil?
        fail ArgumentError, "Missing the required parameter 'email' when calling DomainsApi.domains_by_email_default_patch"
      end
      # resource path
      local_var_path = '/domains/{email}/default'.sub('{' + 'email' + '}', CGI.escape(email.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DomainDetail'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apikey']

      new_options = opts.merge(
        :operation => :"DomainsApi.domains_by_email_default_patch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DomainsApi#domains_by_email_default_patch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Load Domains
    # Returns a list of all domains configured for this Account. Required Access Level: ViewSettings
    # @param [Hash] opts the optional parameters
    # @return [Array<DomainDetail>]
    def domains_get(opts = {})
      data, _status_code, _headers = domains_get_with_http_info(opts)
      data
    end

    # Load Domains
    # Returns a list of all domains configured for this Account. Required Access Level: ViewSettings
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<DomainDetail>, Integer, Hash)>] Array<DomainDetail> data, response status code and response headers
    def domains_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DomainsApi.domains_get ...'
      end
      # resource path
      local_var_path = '/domains'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<DomainDetail>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apikey']

      new_options = opts.merge(
        :operation => :"DomainsApi.domains_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DomainsApi#domains_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add Domain
    # Add new domain to Account. Required Access Level: ModifySettings
    # @param domain_payload [DomainPayload] Domain to add
    # @param [Hash] opts the optional parameters
    # @return [DomainDetail]
    def domains_post(domain_payload, opts = {})
      data, _status_code, _headers = domains_post_with_http_info(domain_payload, opts)
      data
    end

    # Add Domain
    # Add new domain to Account. Required Access Level: ModifySettings
    # @param domain_payload [DomainPayload] Domain to add
    # @param [Hash] opts the optional parameters
    # @return [Array<(DomainDetail, Integer, Hash)>] DomainDetail data, response status code and response headers
    def domains_post_with_http_info(domain_payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DomainsApi.domains_post ...'
      end
      # verify the required parameter 'domain_payload' is set
      if @api_client.config.client_side_validation && domain_payload.nil?
        fail ArgumentError, "Missing the required parameter 'domain_payload' when calling DomainsApi.domains_post"
      end
      # resource path
      local_var_path = '/domains'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(domain_payload)

      # return_type
      return_type = opts[:debug_return_type] || 'DomainDetail'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apikey']

      new_options = opts.merge(
        :operation => :"DomainsApi.domains_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DomainsApi#domains_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
