=begin
#Elastic Email REST API

#This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    The API has a limit of 20 concurrent connections and a hard timeout of 600 seconds per request.    To start using this API, you will need your Access Token (available <a target=\"_blank\" href=\"https://app.elasticemail.com/marketing/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given requestâ€™s description.    Downloadable library clients can be found in our Github repository <a target=\"_blank\" href=\"https://github.com/ElasticEmail?tab=repositories&q=%22rest+api%22+in%3Areadme\">here</a>

The version of the OpenAPI document: 4.0.0
Contact: support@elasticemail.com
Generated by: https://openapi-generator.tech
Generator version: 7.5.0

=end

require 'date'
require 'time'

module ElasticEmail
  class MessageCategoryEnum
    UNKNOWN = "Unknown".freeze
    IGNORE = "Ignore".freeze
    SPAM = "Spam".freeze
    BLACK_LISTED = "BlackListed".freeze
    NO_MAILBOX = "NoMailbox".freeze
    GREY_LISTED = "GreyListed".freeze
    THROTTLED = "Throttled".freeze
    TIMEOUT = "Timeout".freeze
    CONNECTION_PROBLEM = "ConnectionProblem".freeze
    SPF_PROBLEM = "SPFProblem".freeze
    ACCOUNT_PROBLEM = "AccountProblem".freeze
    DNS_PROBLEM = "DNSProblem".freeze
    NOT_DELIVERED_CANCELLED = "NotDeliveredCancelled".freeze
    CODE_ERROR = "CodeError".freeze
    MANUAL_CANCEL = "ManualCancel".freeze
    CONNECTION_TERMINATED = "ConnectionTerminated".freeze
    NOT_DELIVERED = "NotDelivered".freeze

    def self.all_vars
      @all_vars ||= [UNKNOWN, IGNORE, SPAM, BLACK_LISTED, NO_MAILBOX, GREY_LISTED, THROTTLED, TIMEOUT, CONNECTION_PROBLEM, SPF_PROBLEM, ACCOUNT_PROBLEM, DNS_PROBLEM, NOT_DELIVERED_CANCELLED, CODE_ERROR, MANUAL_CANCEL, CONNECTION_TERMINATED, NOT_DELIVERED].freeze
    end

    # Builds the enum from string
    # @param [String] The enum value in the form of the string
    # @return [String] The enum value
    def self.build_from_hash(value)
      new.build_from_hash(value)
    end

    # Builds the enum from string
    # @param [String] The enum value in the form of the string
    # @return [String] The enum value
    def build_from_hash(value)
      return value if MessageCategoryEnum.all_vars.include?(value)
      raise "Invalid ENUM value #{value} for class #MessageCategoryEnum"
    end
  end
end
