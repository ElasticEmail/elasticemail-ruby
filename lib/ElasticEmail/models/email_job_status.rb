=begin
#Elastic Email REST API

#This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    The API has a limit of 20 concurrent connections and a hard timeout of 600 seconds per request.    To start using this API, you will need your Access Token (available <a target=\"_blank\" href=\"https://app.elasticemail.com/marketing/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given requestâ€™s description.    Downloadable library clients can be found in our Github repository <a target=\"_blank\" href=\"https://github.com/ElasticEmail?tab=repositories&q=%22rest+api%22+in%3Areadme\">here</a>

The version of the OpenAPI document: 4.0.0
Contact: support@elasticemail.com
Generated by: https://openapi-generator.tech
Generator version: 7.5.0

=end

require 'date'
require 'time'

module ElasticEmail
  class EmailJobStatus
    # ID number of your attachment
    attr_accessor :id

    # Name of status: submitted, complete, in_progress
    attr_accessor :status

    attr_accessor :recipients_count

    attr_accessor :failed

    # Total emails failed.
    attr_accessor :failed_count

    attr_accessor :sent

    # Total emails sent.
    attr_accessor :sent_count

    # Number of delivered messages
    attr_accessor :delivered

    attr_accessor :delivered_count

    attr_accessor :pending

    attr_accessor :pending_count

    # Number of opened messages
    attr_accessor :opened

    # Total emails opened.
    attr_accessor :opened_count

    # Number of clicked messages
    attr_accessor :clicked

    # Total emails clicked
    attr_accessor :clicked_count

    # Number of unsubscribed messages
    attr_accessor :unsubscribed

    # Total emails unsubscribed
    attr_accessor :unsubscribed_count

    attr_accessor :abuse_reports

    attr_accessor :abuse_reports_count

    # List of all MessageIDs for this job.
    attr_accessor :message_ids

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'ID',
        :'status' => :'Status',
        :'recipients_count' => :'RecipientsCount',
        :'failed' => :'Failed',
        :'failed_count' => :'FailedCount',
        :'sent' => :'Sent',
        :'sent_count' => :'SentCount',
        :'delivered' => :'Delivered',
        :'delivered_count' => :'DeliveredCount',
        :'pending' => :'Pending',
        :'pending_count' => :'PendingCount',
        :'opened' => :'Opened',
        :'opened_count' => :'OpenedCount',
        :'clicked' => :'Clicked',
        :'clicked_count' => :'ClickedCount',
        :'unsubscribed' => :'Unsubscribed',
        :'unsubscribed_count' => :'UnsubscribedCount',
        :'abuse_reports' => :'AbuseReports',
        :'abuse_reports_count' => :'AbuseReportsCount',
        :'message_ids' => :'MessageIDs'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'String',
        :'status' => :'String',
        :'recipients_count' => :'Integer',
        :'failed' => :'Array<EmailJobFailedStatus>',
        :'failed_count' => :'Integer',
        :'sent' => :'Array<String>',
        :'sent_count' => :'Integer',
        :'delivered' => :'Array<String>',
        :'delivered_count' => :'Integer',
        :'pending' => :'Array<String>',
        :'pending_count' => :'Integer',
        :'opened' => :'Array<String>',
        :'opened_count' => :'Integer',
        :'clicked' => :'Array<String>',
        :'clicked_count' => :'Integer',
        :'unsubscribed' => :'Array<String>',
        :'unsubscribed_count' => :'Integer',
        :'abuse_reports' => :'Array<String>',
        :'abuse_reports_count' => :'Integer',
        :'message_ids' => :'Array<String>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `ElasticEmail::EmailJobStatus` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `ElasticEmail::EmailJobStatus`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.key?(:'recipients_count')
        self.recipients_count = attributes[:'recipients_count']
      end

      if attributes.key?(:'failed')
        if (value = attributes[:'failed']).is_a?(Array)
          self.failed = value
        end
      end

      if attributes.key?(:'failed_count')
        self.failed_count = attributes[:'failed_count']
      end

      if attributes.key?(:'sent')
        if (value = attributes[:'sent']).is_a?(Array)
          self.sent = value
        end
      end

      if attributes.key?(:'sent_count')
        self.sent_count = attributes[:'sent_count']
      end

      if attributes.key?(:'delivered')
        if (value = attributes[:'delivered']).is_a?(Array)
          self.delivered = value
        end
      end

      if attributes.key?(:'delivered_count')
        self.delivered_count = attributes[:'delivered_count']
      end

      if attributes.key?(:'pending')
        if (value = attributes[:'pending']).is_a?(Array)
          self.pending = value
        end
      end

      if attributes.key?(:'pending_count')
        self.pending_count = attributes[:'pending_count']
      end

      if attributes.key?(:'opened')
        if (value = attributes[:'opened']).is_a?(Array)
          self.opened = value
        end
      end

      if attributes.key?(:'opened_count')
        self.opened_count = attributes[:'opened_count']
      end

      if attributes.key?(:'clicked')
        if (value = attributes[:'clicked']).is_a?(Array)
          self.clicked = value
        end
      end

      if attributes.key?(:'clicked_count')
        self.clicked_count = attributes[:'clicked_count']
      end

      if attributes.key?(:'unsubscribed')
        if (value = attributes[:'unsubscribed']).is_a?(Array)
          self.unsubscribed = value
        end
      end

      if attributes.key?(:'unsubscribed_count')
        self.unsubscribed_count = attributes[:'unsubscribed_count']
      end

      if attributes.key?(:'abuse_reports')
        if (value = attributes[:'abuse_reports']).is_a?(Array)
          self.abuse_reports = value
        end
      end

      if attributes.key?(:'abuse_reports_count')
        self.abuse_reports_count = attributes[:'abuse_reports_count']
      end

      if attributes.key?(:'message_ids')
        if (value = attributes[:'message_ids']).is_a?(Array)
          self.message_ids = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          status == o.status &&
          recipients_count == o.recipients_count &&
          failed == o.failed &&
          failed_count == o.failed_count &&
          sent == o.sent &&
          sent_count == o.sent_count &&
          delivered == o.delivered &&
          delivered_count == o.delivered_count &&
          pending == o.pending &&
          pending_count == o.pending_count &&
          opened == o.opened &&
          opened_count == o.opened_count &&
          clicked == o.clicked &&
          clicked_count == o.clicked_count &&
          unsubscribed == o.unsubscribed &&
          unsubscribed_count == o.unsubscribed_count &&
          abuse_reports == o.abuse_reports &&
          abuse_reports_count == o.abuse_reports_count &&
          message_ids == o.message_ids
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, status, recipients_count, failed, failed_count, sent, sent_count, delivered, delivered_count, pending, pending_count, opened, opened_count, clicked, clicked_count, unsubscribed, unsubscribed_count, abuse_reports, abuse_reports_count, message_ids].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = ElasticEmail.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
