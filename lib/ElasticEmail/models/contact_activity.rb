=begin
#Elastic Email REST API

#This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    The API has a limit of 20 concurrent connections and a hard timeout of 600 seconds per request.    To start using this API, you will need your Access Token (available <a target=\"_blank\" href=\"https://app.elasticemail.com/marketing/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given requestâ€™s description.    Downloadable library clients can be found in our Github repository <a target=\"_blank\" href=\"https://github.com/ElasticEmail?tab=repositories&q=%22rest+api%22+in%3Areadme\">here</a>

The version of the OpenAPI document: 4.0.0
Contact: support@elasticemail.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'date'
require 'time'

module ElasticEmail
  class ContactActivity
    # Total emails sent.
    attr_accessor :total_sent

    # Total emails opened.
    attr_accessor :total_opened

    # Total emails clicked
    attr_accessor :total_clicked

    # Total emails failed.
    attr_accessor :total_failed

    # Last date when an email was sent to this contact
    attr_accessor :last_sent

    # Date this contact last opened an email
    attr_accessor :last_opened

    # Date this contact last clicked an email
    attr_accessor :last_clicked

    # Last date when an email sent to this contact bounced
    attr_accessor :last_failed

    # IP from which this contact opened or clicked their email last time
    attr_accessor :last_ip

    # Last RFC Error code if any occurred
    attr_accessor :error_code

    # Last RFC error message if any occurred
    attr_accessor :friendly_error_message

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'total_sent' => :'TotalSent',
        :'total_opened' => :'TotalOpened',
        :'total_clicked' => :'TotalClicked',
        :'total_failed' => :'TotalFailed',
        :'last_sent' => :'LastSent',
        :'last_opened' => :'LastOpened',
        :'last_clicked' => :'LastClicked',
        :'last_failed' => :'LastFailed',
        :'last_ip' => :'LastIP',
        :'error_code' => :'ErrorCode',
        :'friendly_error_message' => :'FriendlyErrorMessage'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'total_sent' => :'Integer',
        :'total_opened' => :'Integer',
        :'total_clicked' => :'Integer',
        :'total_failed' => :'Integer',
        :'last_sent' => :'Time',
        :'last_opened' => :'Time',
        :'last_clicked' => :'Time',
        :'last_failed' => :'Time',
        :'last_ip' => :'String',
        :'error_code' => :'Integer',
        :'friendly_error_message' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'last_sent',
        :'last_opened',
        :'last_clicked',
        :'last_failed',
        :'error_code',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `ElasticEmail::ContactActivity` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `ElasticEmail::ContactActivity`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'total_sent')
        self.total_sent = attributes[:'total_sent']
      end

      if attributes.key?(:'total_opened')
        self.total_opened = attributes[:'total_opened']
      end

      if attributes.key?(:'total_clicked')
        self.total_clicked = attributes[:'total_clicked']
      end

      if attributes.key?(:'total_failed')
        self.total_failed = attributes[:'total_failed']
      end

      if attributes.key?(:'last_sent')
        self.last_sent = attributes[:'last_sent']
      end

      if attributes.key?(:'last_opened')
        self.last_opened = attributes[:'last_opened']
      end

      if attributes.key?(:'last_clicked')
        self.last_clicked = attributes[:'last_clicked']
      end

      if attributes.key?(:'last_failed')
        self.last_failed = attributes[:'last_failed']
      end

      if attributes.key?(:'last_ip')
        self.last_ip = attributes[:'last_ip']
      end

      if attributes.key?(:'error_code')
        self.error_code = attributes[:'error_code']
      end

      if attributes.key?(:'friendly_error_message')
        self.friendly_error_message = attributes[:'friendly_error_message']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          total_sent == o.total_sent &&
          total_opened == o.total_opened &&
          total_clicked == o.total_clicked &&
          total_failed == o.total_failed &&
          last_sent == o.last_sent &&
          last_opened == o.last_opened &&
          last_clicked == o.last_clicked &&
          last_failed == o.last_failed &&
          last_ip == o.last_ip &&
          error_code == o.error_code &&
          friendly_error_message == o.friendly_error_message
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [total_sent, total_opened, total_clicked, total_failed, last_sent, last_opened, last_clicked, last_failed, last_ip, error_code, friendly_error_message].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = ElasticEmail.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
